// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wKYGFqyVBmDVb7fPCj2tLF
// Component: TL0MNQ9-3-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dls.module.css"; // plasmic-import: wKYGFqyVBmDVb7fPCj2tLF/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: TL0MNQ9-3-/css

import FavoriteBorderIcon from "./icons/PlasmicIcon__FavoriteBorder"; // plasmic-import: I2tqpVTqTYE/icon
import ArrowDropDownIcon from "./icons/PlasmicIcon__ArrowDropDown"; // plasmic-import: AvLHLrjLR8/icon

export type PlasmicButton__VariantMembers = {
  withIcons: "leading" | "trailing";
  emphasis: "mid" | "low";
  size: "medium";
};

export type PlasmicButton__VariantsArgs = {
  withIcons?: MultiChoiceArg<"leading" | "trailing">;
  emphasis?: SingleChoiceArg<"mid" | "low">;
  size?: SingleChoiceArg<"medium">;
};

type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "withIcons",
  "emphasis",
  "size"
);

export type PlasmicButton__ArgsType = {
  leadingIcon?: React.ReactNode;
  trailingIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "leadingIcon",
  "trailingIcon"
);

export type PlasmicButton__OverridesType = {
  button?: p.Flex<"button">;
  text?: p.Flex<"div">;
};

export interface DefaultButtonProps {
  leadingIcon?: React.ReactNode;
  trailingIcon?: React.ReactNode;
  withIcons?: MultiChoiceArg<"leading" | "trailing">;
  emphasis?: SingleChoiceArg<"mid" | "low">;
  size?: SingleChoiceArg<"medium">;
  className?: string;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"button"}
      data-plasmic-override={overrides.button}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.button,
        projectcss.root_reset,
        sty.button,
        {
          [sty.buttonemphasis_low]: hasVariant(variants, "emphasis", "low"),
          [sty.buttonemphasis_mid]: hasVariant(variants, "emphasis", "mid"),
          [sty.buttonemphasis_mid_size_medium]:
            hasVariant(variants, "emphasis", "mid") &&
            hasVariant(variants, "size", "medium"),
          [sty.buttonsize_medium]: hasVariant(variants, "size", "medium")
        }
      )}
    >
      {(hasVariant(variants, "withIcons", "leading") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <FavoriteBorderIcon
                className={classNames(projectcss.all, sty.svg__diEkT)}
                role={"img"}
              />
            ),

            value: args.leadingIcon,
            className: classNames(sty.slotTargetLeadingIcon, {
              [sty.slotTargetLeadingIconemphasis_low]: hasVariant(
                variants,
                "emphasis",
                "low"
              ),
              [sty.slotTargetLeadingIconemphasis_mid]: hasVariant(
                variants,
                "emphasis",
                "mid"
              ),
              [sty.slotTargetLeadingIconwithIcons_leading]: hasVariant(
                variants,
                "withIcons",
                "leading"
              )
            })
          })
        : null}
      {true ? (
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textemphasis_low]: hasVariant(variants, "emphasis", "low"),
              [sty.textemphasis_mid]: hasVariant(variants, "emphasis", "mid")
            }
          )}
        >
          {"Label"}
        </div>
      ) : null}
      {(hasVariant(variants, "withIcons", "trailing") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <ArrowDropDownIcon
                className={classNames(projectcss.all, sty.svg__wkNqm)}
                role={"img"}
              />
            ),

            value: args.trailingIcon,
            className: classNames(sty.slotTargetTrailingIcon, {
              [sty.slotTargetTrailingIconemphasis_low]: hasVariant(
                variants,
                "emphasis",
                "low"
              ),
              [sty.slotTargetTrailingIconemphasis_mid]: hasVariant(
                variants,
                "emphasis",
                "mid"
              ),
              [sty.slotTargetTrailingIconwithIcons_trailing]: hasVariant(
                variants,
                "withIcons",
                "trailing"
              )
            })
          })
        : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  button: ["button", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  button: "button";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "button") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("button"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
